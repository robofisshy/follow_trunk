/*****************************************************************************
*                                                                            *
*  OpenNI 2.x Alpha                                                          *
*  Copyright (C) 2012 PrimeSense Ltd.                                        *
*                                                                            *
*  This file is part of OpenNI.                                              *
*                                                                            *
*  Licensed under the Apache License, Version 2.0 (the "License");           *
*  you may not use this file except in compliance with the License.          *
*  You may obtain a copy of the License at                                   *
*                                                                            *
*      http://www.apache.org/licenses/LICENSE-2.0                            *
*                                                                            *
*  Unless required by applicable law or agreed to in writing, software       *
*  distributed under the License is distributed on an "AS IS" BASIS,         *
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *
*  See the License for the specific language governing permissions and       *
*  limitations under the License.                                            *
*                                                                            *
*****************************************************************************/
#include <stdio.h>
#include <iostream>
#include <cmath>
#include <vector>
//#include "OniSampleUtilities.h"
#include <OpenNI.h>
//#include "../Common/OniSampleUtilities.h"

#define SAMPLE_READ_WAIT_TIMEOUT 2000 //2000ms

using namespace openni;
using namespace std;

typedef struct point
{
	float x;
	float y;
	float z;
}point;
int l_speed=0;
int r_speed=0;

int main(int argc, char** argv)
{

	double min_y_(-0.35), max_y_(0.35),
			min_x_(0.1), max_x_(0.6),
			max_z_(1.2), goal_z_(0.7),
			z_scale_(3000), x_scale_(500);
	bool enabled_(true);
	Status rc = OpenNI::initialize();
	if (rc != STATUS_OK)
	{
		printf("Initialize failed\n%s\n", OpenNI::getExtendedError());
		return 1;
	}

	Device device;
	rc = device.open(ANY_DEVICE);
	if (rc != STATUS_OK)
	{
		printf("Couldn't open device\n%s\n", OpenNI::getExtendedError());
		return 2;
	}

	VideoStream depth;

	if (device.getSensorInfo(SENSOR_DEPTH) != NULL)
	{
		rc = depth.create(device, SENSOR_DEPTH);
		if (rc != STATUS_OK)
		{
			printf("Couldn't create depth stream\n%s\n", OpenNI::getExtendedError());
			return 3;
		}
	}

	VideoMode modeDepth;
	modeDepth.setResolution( 640, 480 );
	modeDepth.setFps( 30 );
	modeDepth.setPixelFormat( PIXEL_FORMAT_DEPTH_1_MM );
	depth.setVideoMode(modeDepth);

	if( device.isImageRegistrationModeSupported(
			IMAGE_REGISTRATION_DEPTH_TO_COLOR ) )
	{
		device.setImageRegistrationMode( IMAGE_REGISTRATION_DEPTH_TO_COLOR );
	}

	rc = depth.start();
	if (rc != STATUS_OK)
	{
		printf("Couldn't start the depth stream\n%s\n", OpenNI::getExtendedError());
		return 4;
	}
	VideoFrameRef frame;
	while (1)
	{
		std::cout<<"heiheihei"<<std::endl;
		int changedStreamDummy;
		VideoStream* pStream = &depth;
		rc = OpenNI::waitForAnyStream(&pStream, 1, &changedStreamDummy, SAMPLE_READ_WAIT_TIMEOUT);
		if (rc != STATUS_OK)
		{
			printf("Wait failed! (timeout is %d ms)\n%s\n", SAMPLE_READ_WAIT_TIMEOUT, OpenNI::getExtendedError());
			continue;
		}

		rc = depth.readFrame(&frame);
		if (rc != STATUS_OK)
		{
			printf("Read failed!\n%s\n", OpenNI::getExtendedError());
			continue;
		}

		vector<point> points;
		point depth_point;
        float x(0.0),y(0.0),z(0.0),xx(0.0);
		DepthPixel *pDepth = (DepthPixel*)frame.getData();
		for(int i=0;i<frame.getHeight();i++)
		{
			for(int j=0;j<frame.getWidth();j++)
			{
				xx = pDepth[i*frame.getWidth()+j];
				CoordinateConverter::convertDepthToWorld (depth,i,j,xx,&x,&y,&z);
				depth_point.x=x*0.001;
				depth_point.y=y*0.001;
				depth_point.z=z*0.001;
				points.push_back(depth_point);
				//cout<<xx<<endl;
			}
		}

		//X,Y,Z of the centroid
		x = 0.0;
		y = 0.0;
		z = 1e6;
		//Number of points observed
		unsigned int n = 0;
		//Iterate through all the points in the region and find the average of the position
		for (vector<point>::iterator iter = points.begin(); iter != points.end(); iter++)
		{
			//First, ensure that the point's position is valid. This must be done in a seperate
			//if because we do not want to perform comparison on a nan value.
			if (!isnan(x) && !isnan(y) && !isnan(z))
			{
				//Test to ensure the point is within the aceptable box.
				if (-iter->y > min_y_ && -iter->y < max_y_ && iter->x < max_x_ && iter->x > min_x_ && iter->z < max_z_)
				{
					//Add the point to the totals
					x += iter->x;
					y += iter->y;
					z = std::min(z, iter->z);
					n++;
				}
			}
		}

		//If there are points, find the centroid and calculate the command goal.
		//If there are no points, simply publish a stop goal.
		if (n>4000)
		{
			x /= n;
			y /= n;
			if(z > max_z_){
				cout<<"No valid points detected, stopping the robot"<<endl;
				if (enabled_)
				{
					l_speed=0;
					r_speed=0;
				}
				return 0;
			}

			printf("Centroid at %f %f %f with %d points", x, y, z, n);

			if (enabled_)
			{
				l_speed = (z - goal_z_) * z_scale_+y * x_scale_;
				l_speed = (z - goal_z_) * z_scale_-y * x_scale_;
			}
		}
	}

	depth.stop();
	depth.destroy();
	device.close();
	OpenNI::shutdown();

	return 0;
}
